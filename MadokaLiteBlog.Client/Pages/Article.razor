@page "/article/{Id:long}"
@using Markdig
@using System.Text.RegularExpressions
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject PostListState ListState
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@post?.Title</PageTitle>

<div class="container mt-4">
    <div class="d-flex align-items-center mb-3">
        <button class="btn btn-outline-secondary" @onclick="NavigateBack">
            <i class="bi bi-arrow-left"></i> Back to Posts
        </button>
        @if (isAuthenticated)
        {
            <button class="btn btn-outline-primary ms-2" @onclick="NavigateToEdit">
                <i class="bi bi-pencil"></i> 编辑
            </button>
        }
    </div>

    @if (post == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <h1 class="mb-3">@post.Title</h1>
        <div class="text-muted mb-4">
            <small>
                创建于 @(post.CreatedAt?.ToLocalTime().ToString("yyyy-MM-dd HH:mm"))
                @if (post.UpdatedAt != post.CreatedAt && post.UpdatedAt != null)
                {
                    <span class="ms-3">
                        更新于 @(post.UpdatedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm"))
                    </span>
                }
            </small>
        </div>
        <div class="article-content" id="article-content">
            @((MarkupString)renderedContent)
        </div>
    }
</div>

<style>
    .text-muted small {
        font-size: 0.9rem;
    }
</style>

@code {
    [Parameter]
    public long Id { get; set; }
    private Post? post;
    private string renderedContent = string.Empty;
    private bool isAuthenticated;

    private string ProcessContent(string content)
    {
        if (string.IsNullOrEmpty(content)) return content;

        try
        {
            // 处理数学公式
            // 只在$$ 或 $ 之间插入 的 \\ 都替换为 \
            @* content = content.Replace("\\\\", "\\"); *@
            @* content = Regex.Replace(content, @"(\$\$.*?\\\\.*?\$\$)|(\$.*?\\\\.*?\$)", match =>
            {
                string value = match.Value;
                if (value.StartsWith("$$") && value.EndsWith("$$"))
                {
                    // 替换公式块中的 \\ 为 \
                    return value.Replace("\\\\", "\\");
                }
                if (value.StartsWith("$") && value.EndsWith("$"))
                {
                    // 替换行内公式中的 \\ 为 \
                    return value.Replace("\\\\", "\\");
                }
                return value;
            }, RegexOptions.Singleline); *@
            var builder = new StringBuilder(content.Length);
            int length = content.Length;
            int i = 0;

            while (i < length)
            {
                if (content[i] == '$')
                {
                    int start = i;
                    bool isBlockFormula = (i + 1 < length && content[i + 1] == '$');
                    int end = -1;

                    if (isBlockFormula)
                    {
                        i += 2;
                        while (i < length - 1)
                        {
                            if (content[i] == '$' && content[i + 1] == '$')
                            {
                                end = i + 1; 
                                break;
                            }
                            i++;
                        }
                    }
                    else
                    {
                        i += 1;
                        while (i < length)
                        {
                            if (content[i] == '$')
                            {
                                end = i;
                                break;
                            }
                            i++;
                        }
                    }
                    if (end != -1)
                    {
                        int formulaLength = end - start + 1;
                        builder.Append(content, start, formulaLength);

                        for (int j = builder.Length - formulaLength; j < builder.Length; j++)
                        {
                            if (builder[j] == '\\' && j + 1 < builder.Length && builder[j + 1] == '\\')
                            {
                                builder.Remove(j, 1);
                            }
                        }
                        i = end + 1;
                        continue;
                    }
                    else
                    {
                        builder.Append(content.Substring(start));
                        break;
                    }
                }
                else
                {
                    builder.Append(content[i]);
                    i++;
                }
            }

            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .UseMathematics()
                .Build();
            return Markdown.ToHtml(builder.ToString(), pipeline);
        }
        catch (Exception ex)
        {
            return $"<p>Error processing content: {ex.Message}</p>";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        try
        {
            Console.WriteLine($"Id: {Id}");
            var response = await Http.PostAsync($"api/post/getbyid?id={Id}", new StringContent(""));
            if (response.IsSuccessStatusCode)
            {
                post = await response.Content.ReadFromJsonAsync<Post>();
                if (post?.Content != null)
                {
                    renderedContent = ProcessContent(post.Content);
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await ((CustomAuthStateProvider)AuthStateProvider).HandleAuthenticationError();
                isAuthenticated = false;
            }
        }
        catch (Exception ex)
        {
            renderedContent = $"<p>Error loading article: {ex.Message}</p>";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (post?.Content != null)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("renderMath");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"MathJax error: {ex.Message}");
            }
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/posts");
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/prosemirror/{Id}");
    }
} 