@page "/article/{Id:long}"
@using MadokaLiteBlog.Client.Auth
@using MadokaLiteBlog.Client.Models
@using Markdig
@using System.Text.RegularExpressions
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject PostListState ListState
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@post?.Title</PageTitle>

<div class="container mt-4">
    <div class="d-flex align-items-center mb-3">
        <button class="btn btn-outline-secondary" @onclick="NavigateBack">
            <i class="bi bi-arrow-left"></i> Back to Posts
        </button>
        @if (isAuthenticated)
        {
            <button class="btn btn-outline-primary ms-2" @onclick="NavigateToEdit">
                <i class="bi bi-pencil"></i> 编辑
            </button>
        }
    </div>

    @if (post == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <h1 class="mb-3">@post.Title</h1>
        <div class="text-muted mb-4">
            <small>
                创建于 @(post.CreatedAt?.ToLocalTime().ToString("yyyy-MM-dd HH:mm"))
                @if (post.UpdatedAt != post.CreatedAt && post.UpdatedAt != null)
                {
                    <span class="ms-3">
                        更新于 @(post.UpdatedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm"))
                    </span>
                }
            </small>
        </div>
        <div class="article-content" id="article-content">
            @((MarkupString)renderedContent)
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; }
    private Post? post;
    private string renderedContent = string.Empty;
    private bool isAuthenticated;

    private string ProcessContent(string content)
    {
        if (string.IsNullOrEmpty(content)) return content;

        try
        {
            Console.WriteLine("Original content:" + content);
            
            // 不需要处理双重转义，因为编辑器已经正确处理了
            // 直接使用 Markdig 处理 Markdown 内容
            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .UseEmphasisExtras()
                .UseGridTables()
                .UsePipeTables()
                .UseTaskLists()
                .UseAutoLinks()
                .UseEmojiAndSmiley()
                .UseBootstrap()
                .UseFooters()
                .UseFootnotes()
                .UseCitations()
                .UseCustomContainers()
                .UseDefinitionLists()
                .UseFigures()
                .UseAutoIdentifiers()
                .UseGenericAttributes()
                .UseMediaLinks()
                .UseMathematics()
                .Build();
            
            var html = Markdown.ToHtml(content, pipeline);
            Console.WriteLine("Generated HTML: " + html);
            return html;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing content: {ex.Message}");
            return $"<p>Error processing content: {ex.Message}</p>";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        try
        {
            Console.WriteLine($"Id: {Id}");
            var response = await Http.PostAsync($"api/post/getbyid?id={Id}", new StringContent(""));
            if (response.IsSuccessStatusCode)
            {
                post = await response.Content.ReadFromJsonAsync<Post>();
                if (post?.Content != null)
                {
                    renderedContent = ProcessContent(post.Content);
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await ((CustomAuthStateProvider)AuthStateProvider).HandleAuthenticationError();
                isAuthenticated = false;
            }
        }
        catch (Exception ex)
        {
            renderedContent = $"<p>Error loading article: {ex.Message}</p>";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (post?.Content != null)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("renderMath");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"MathJax error: {ex.Message}");
            }
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/posts");
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/editor/{Id}");
    }
} 