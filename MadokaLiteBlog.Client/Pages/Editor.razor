@page "/editor"
@page "/editor/{Id:long}"
@using System.Text.Json
@using MadokaLiteBlog.Client.Components
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<PageTitle>@(Id == null ? "新建文章" : "编辑文章")</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="card-title mb-4">@(Id == null ? "创建新文章" : "编辑文章")</h2>
                    <EditForm Model="@post" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="form-group mb-4">
                            <label for="title" class="form-label fw-bold">标题</label>
                            <InputText id="title" @bind-Value="post.Title" class="form-control form-control-lg" placeholder="请输入文章标题..." />
                            <ValidationMessage For="@(() => post.Title)" class="text-danger" />
                        </div>

                        <div class="form-group mb-4">
                            <label for="summary" class="form-label fw-bold">摘要</label>
                            <InputTextArea id="summary" @bind-Value="post.Summary" class="form-control" rows="3" 
                                         placeholder="请输入文章摘要..." />
                            <ValidationMessage For="@(() => post.Summary)" class="text-danger" />
                        </div>
                        @if (isLoaded)
                        {
                            <Prosemirror @ref="editorComponent" Content="@post.Content" />
                        }
                        else
                        {
                            <p>Loading...</p>
                        }
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <button type="button" class="btn btn-outline-secondary me-2">保存草稿</button>
                            @if (Id.HasValue)
                            {
                                <button type="button" class="btn btn-danger me-2" @onclick="ShowDeleteConfirmation">
                                    <i class="bi bi-trash"></i> 删除文章
                                </button>
                            }
                            <button type="submit" class="btn btn-primary px-4">
                                @(Id == null ? "发布文章" : "更新文章")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 删除确认对话框 -->
@if (showDeleteDialog)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">确认删除</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p>确定要删除文章 "<strong>@post.Title</strong>" 吗？</p>
                    <p class="text-danger">此操作不可撤销！</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmation">取消</button>
                    <button type="button" class="btn btn-danger" @onclick="DeletePost">确认删除</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Toast 消息 -->
@if (!string.IsNullOrEmpty(toastMessage))
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public long? Id { get; set; }
    private Post post = new Post();
    private Timer? toastTimer;
    private string toastMessage = "";
    private bool isLoaded = false;
    private Prosemirror? editorComponent;
    private bool showDeleteDialog = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if(authState.User == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        
        if (Id.HasValue)
        {   
            await LoadPost();
        } else {
            isLoaded = true;
        }
    }
    
    private async Task LoadPost()
    {
        try
        {
            var response = await Http.PostAsync($"api/post/getbyid?id={Id}", new StringContent(""));
            if (response.IsSuccessStatusCode)
            {
                post = await response.Content.ReadFromJsonAsync<Post>() ?? new Post();
                isLoaded = true;
                StateHasChanged(); // 强制更新UI
            } 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading post: {ex.Message}");
        }
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteDialog = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        showDeleteDialog = false;
        StateHasChanged();
    }

    private async Task DeletePost()
    {
        try
        {
            if (!Id.HasValue)
            {
                ShowToast("无法删除：文章ID无效");
                return;
            }

            var response = await Http.PostAsJsonAsync("api/post/delete", Id.Value);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<int>();
                if (result == 1)
                {
                    ShowToast("文章删除成功！");
                    HideDeleteConfirmation();
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo("/posts");
                }
                else
                {
                    ShowToast("删除失败：文章可能不存在");
                }
            }
            else
            {
                ShowToast("删除失败：" + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            ShowToast("删除失败：" + ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response;
            if (editorComponent is not null)
            {
                post.Content = await editorComponent.GetMarkdownContent();
                Console.WriteLine($"Content to save: {post.Content}"); // 添加调试日志
            }

            if (Id.HasValue)
            {
                post.Id = Id.Value;
                Console.WriteLine("post: " + post.Content);
                response = await Http.PostAsJsonAsync("api/post/update", post);
                Console.WriteLine("response: " + response);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<int>();
                    if (result == 1)
                    {
                        ShowToast("文章更新成功！");
                        await Task.Delay(1500);
                        NavigationManager.NavigateTo($"/article/{Id}");
                        return;
                    }
                }
                ShowToast("更新失败");
                return;
            }
            response = await Http.PostAsJsonAsync("api/post/insert", post);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<PostResponse>();
                if (result?.Id != null)
                {
                    ShowToast("文章发布成功！");
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo($"/article/{result.Id}");
                }
            }
        }
        catch (Exception ex)
        {
            ShowToast("保存失败：" + ex.Message);
            Console.WriteLine($"Error: {ex}");
        }
    }
    private void ShowToast(string message)
    {
        toastMessage = message;
        
        toastTimer?.Dispose();
        toastTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                toastMessage = "";
                StateHasChanged();
            });
        }, null, 3000, Timeout.Infinite);
    }
    private class PostResponse
    {
        public long Id { get; set; }
        public string? Title { get; set; }
    }

}
