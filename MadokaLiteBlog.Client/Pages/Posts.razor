@page "/posts"
@inject NavigationManager NavigationManager
@inject PostListState ListState
@inject HttpClient Http
@implements IDisposable

<div class="container mt-4">
    @if (!ListState.HasData)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        @foreach (var post in ListState.Posts)
        {
            <div class="card mb-3" @onclick="() => NavigateToArticle(post.Id)">
                <div class="card-body">
                    <h5 class="card-title">@post.Title</h5>
                    <p class="summary-text">@post.Summary</p>
                </div>
            </div>
        }

        <div class="d-flex justify-content-between align-items-center mt-4">
            <button class="btn btn-outline-primary @(ListState.CurrentPage <= 1 ? "invisible" : "")" @onclick="PreviousPage">
                <i class="bi bi-chevron-left"></i> Previous
            </button>

            <span>Page @ListState.CurrentPage</span>

            <button class="btn btn-outline-primary @(ListState.Posts.Count < ListState.PageSize ? "invisible" : "")" @onclick="NextPage">
                Next <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    }
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        ListState.OnStateChanged += StateHasChanged;
        
        if (!ListState.HasData)
        {
            await LoadPosts();
        }
    }

    private async Task LoadPosts()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/post/getsummary?page={ListState.CurrentPage}&pageSize={ListState.PageSize}", new { });
            if (response.IsSuccessStatusCode)
            {
                var posts = await response.Content.ReadFromJsonAsync<List<Post>>();
                if (posts != null)
                {
                    ListState.Posts = posts;
                    ListState.HasData = true;
                    ListState.NotifyStateChanged();
                }
            }
        }
        catch (Exception ex)
        {
            // 处理错误
            Console.WriteLine($"Error loading posts: {ex.Message}");
        }
    }

    private async Task NextPage()
    {
        ListState.CurrentPage++;
        await LoadPosts();
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        if (ListState.CurrentPage > 1)
        {
            ListState.CurrentPage--;
            await LoadPosts();
            StateHasChanged();
        }
    }

    private void NavigateToArticle(long id)
    {
        NavigationManager.NavigateTo($"/article/{id}");
    }

    public void Dispose()
    {
        ListState.OnStateChanged -= StateHasChanged;
    }
}