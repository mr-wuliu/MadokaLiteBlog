@page "/posts"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>
@if (posts == null || posts.Count == 0)
{
    <p>Loading...</p>
}
else
{
    @foreach (var post in posts)
    {
        <div class="card mb-3" style="cursor: pointer;" @onclick="() => NavigateToArticle(post.Id)">
            <div class="card-body">
                <h5 class="card-title">@post.Title</h5>
                <p class="card-text">@post.Summary</p>
            </div>
        </div>
    }
}

<div class="pagination d-flex justify-content-center align-items-center mt-4">
    <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@isFirstPage">上一页</button>
    <span>第 @currentPage 页</span>
    <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@isLastPage">下一页</button>
</div>

@code {
    private List<Post> posts = new List<Post>();
    private int currentPage = 1;
    private const int pageSize = 5;
    private bool isLoading = false;
    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => posts == null || posts.Count < pageSize;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            var response = await Http.PostAsJsonAsync($"api/post/getsummary?page={currentPage}&pageSize={pageSize}", new { });
            if (response.IsSuccessStatusCode)
            {
                var newPosts = await response.Content.ReadFromJsonAsync<List<Post>>();
                if (newPosts != null)
                {
                    posts = newPosts;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMorePosts()
    {
        currentPage++;
        await LoadData();
    }

        private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    private async Task NextPage()
    {
        if (!isLastPage)
        {
            currentPage++;
            await LoadData();
        }
    }

    private void NavigateToArticle(long id)
    {
        NavigationManager.NavigateTo($"/article/{id}");
    }
} 