@page "/posts"
@inject HttpClient Http

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>

<div class="mb-3">
    <select class="form-select" @bind="loadType">
        <option value="all">加载所有文章</option>
        <option value="single">加载单个文章</option>
    </select>

    @if (loadType == "single")
    {
        <div class="mt-2">
            <input type="number" class="form-control" 
                    @bind="selectedId" placeholder="输入文章ID" />
            <button class="btn btn-primary mt-2" @onclick="LoadPost">加载</button>
        </div>
    }
</div>

@if (posts == null && post == null)
{
    <p>Loading...</p>
}
else if (loadType == "all" && posts != null)
{
    @foreach (var post in posts)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">@post.Title</h5>
                <p class="card-text">@post.Content</p>
            </div>
        </div>
    }
}
else if (loadType == "single" && post != null)
{
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@post.Title</h5>
            <p class="card-text">@post.Content</p>
        </div>
    </div>
}

@code {
    private List<Post>? posts;
    private Post? post;
    private string loadType = "all";
    private int selectedId;
    private bool isLoading = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            if (loadType == "all")
            {
                posts = await Http.GetFromJsonAsync<List<Post>>("api/post");
                post = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task LoadPost()
    {
        try
        {
            isLoading = true;
            post = await Http.GetFromJsonAsync<Post>($"api/post/{selectedId}");
            posts = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    @* protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>("api/post");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    private async Task GetPost(int id)
    {
        post = await Http.GetFromJsonAsync<Post>($"api/post/{id}");
    } *@

} 