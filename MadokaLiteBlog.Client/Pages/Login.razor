@page "/login"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<div class="login-container">
    <div class="login-box">
        <h3>登录</h3>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label>用户名:</label>
                <InputText @bind-Value="loginModel.Username" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>

            <div class="form-group">
                <label>密码:</label>
                <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button type="submit" class="btn btn-primary">登录</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private string? publicKey;

    protected override void OnInitialized()
    {
        publicKey = Configuration["Rsa:PublicKey"];
    }
    private async Task HandleLogin()
    {
        try
        {
            var encryptedPassword = await JSRuntime.InvokeAsync<string>(
                "rsaFunctions.encryptPassword", 
                loginModel.Password, 
                publicKey);
            
            var loginRequest = new LoginRequest 
            { 
                Username = loginModel.Username,
                Password = encryptedPassword
            };

            var response = await Http.PostAsJsonAsync("api/auth/login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                
                await LocalStorage.SetItemAsync("authToken", result?.Token);
                
                await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(result?.Username ?? "");
                
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "登录失败：" + await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "发生错误：" + ex.Message;
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "请输入用户名")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "请输入密码")]
        public string Password { get; set; } = "";
    }

    private class LoginRequest
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private class LoginResponse
    {
        public string Token { get; set; } = "";
        public string Username { get; set; } = "";
    }

    private class PublicKeyResponse
    {
        public string publicKey { get; set; } = "";
    }
}